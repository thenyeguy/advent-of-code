inp w      inp w      inp w      inp w      inp w      inp w       inp w      inp w      inp w      inp w       inp w      inp w       inp w       inp w

mul x 0    mul x 0    mul x 0    mul x 0    mul x 0    mul x 0     mul x 0    mul x 0    mul x 0    mul x 0     mul x 0    mul x 0     mul x 0     mul x 0
add x z    add x z    add x z    add x z    add x z    add x z     add x z    add x z    add x z    add x z     add x z    add x z     add x z     add x z
mod x 26   mod x 26   mod x 26   mod x 26   mod x 26   mod x 26    mod x 26   mod x 26   mod x 26   mod x 26    mod x 26   mod x 26    mod x 26    mod x 26

div z 1    div z 1    div z 1    div z 1    div z 26   div z 26    div z 1    div z 1    div z 26   div z 26    div z 1    div z 26    div z 26    div z 26

add x 10   add x 11   add x 14   add x 13   add x -6   add x -14   add x 14   add x 13   add x -8   add x -15   add x 10   add x -11   add x -13   add x -4
eql x w    eql x w    eql x w    eql x w    eql x w    eql x w     eql x w    eql x w    eql x w    eql x w     eql x w    eql x w     eql x w     eql x w
eql x 0    eql x 0    eql x 0    eql x 0    eql x 0    eql x 0     eql x 0    eql x 0    eql x 0    eql x 0     eql x 0    eql x 0     eql x 0     eql x 0

mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0     mul y 0    mul y 0    mul y 0    mul y 0     mul y 0    mul y 0     mul y 0     mul y 0
add y 25   add y 25   add y 25   add y 25   add y 25   add y 25    add y 25   add y 25   add y 25   add y 25    add y 25   add y 25    add y 25    add y 25
mul y x    mul y x    mul y x    mul y x    mul y x    mul y x     mul y x    mul y x    mul y x    mul y x     mul y x    mul y x     mul y x     mul y x
add y 1    add y 1    add y 1    add y 1    add y 1    add y 1     add y 1    add y 1    add y 1    add y 1     add y 1    add y 1     add y 1     add y 1

mul z y    mul z y    mul z y    mul z y    mul z y    mul z y     mul z y    mul z y    mul z y    mul z y     mul z y    mul z y     mul z y     mul z y

mul y 0    mul y 0    mul y 0    mul y 0    mul y 0    mul y 0     mul y 0    mul y 0    mul y 0    mul y 0     mul y 0    mul y 0     mul y 0     mul y 0
add y w    add y w    add y w    add y w    add y w    add y w     add y w    add y w    add y w    add y w     add y w    add y w     add y w     add y w
add y 1    add y 9    add y 12   add y 6    add y 9    add y 15    add y 7    add y 12   add y 15   add y 3     add y 6    add y 2     add y 10    add y 12
mul y x    mul y x    mul y x    mul y x    mul y x    mul y x     mul y x    mul y x    mul y x    mul y x     mul y x    mul y x     mul y x     mul y x

add z y    add z y    add z y    add z y    add z y    add z y     add z y    add z y    add z y    add z y     add z y    add z y     add z y     add z y


###################

for i in 1:14
    w = input[i]
    if z%26 + chk[i] == w         if peek(z) + chk[i] == input[i]
        z /= div[i] # 26 or 1         pop?(z)
    else                          else
        z /= div[i] # 26 or 1         pop?(z)
        z = 26*z + w + sum[i]         push(input[i] + sum[i])
    end                           end
end


div = [ 1,  1,  1,  1, 26,  26,  1,  1, 26,  26,  1,  26,  26, 26]
chk = [10, 11, 14, 13, -6, -14, 14, 13, -8, -15, 10, -11, -13, -4]
sum = [ 1,  9, 12,  6,  9,  15,  7, 12, 15,   3,  6,   2,  10, 12]


Notes:
 * Can only enter top branch when chk[i] is negative.
 * All pops are when chk[i] is negative
 * Half of is are pops
 * Goal: always pass the chk on a pop.  


Stack:
 Push: i[1]+s[1]
 Push: i[1]+s[1] i[2]+s[2]
 Push: i[1]+s[1] i[2]+s[2] i[3]+s[3]
 Push: i[1]+s[1] i[2]+s[2] i[3]+s[3] i[4]+s[4]

 Pop: i[4]+s[4]+chk[5] == i[5]
      i[1]+s[1] i[2]+s[2] i[3]+s[3]

 Pop: i[3]+s[3]+chk[6] == i[6]
      i[1]+s[1] i[2]+s[2]

 Push: i[1]+s[1] i[2]+s[2] i[7]+s[7]
 Push: i[1]+s[1] i[2]+s[2] i[7]+s[7] i[8]+s[8]

 Pop: i[8]+s[8]+chk[9] == i[9]
      i[1]+s[1] i[2]+s[2] i[7]+s[7]

 Pop: i[7]+s[7]+chk[10] == i[10]
      i[1]+s[1] i[2]+s[2]

 Push: i[1]+s[1] i[2]+s[2] i[11]+s[11]

 Pop: i[11]+s[11]+chk[12] == i[12]
      i[1]+s[1] i[2]+s[2]

 Pop: i[2]+s[2]+chk[13] == i[13]
      i[1]+s[1]

 Pop: i[1]+s[1]+chk[14] == i[14]
